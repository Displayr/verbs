% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/average.R, R/averagecolumns.R, R/averagerows.R
\name{Average}
\alias{Average}
\alias{AverageEachColumn}
\alias{AverageColumns}
\alias{AverageEachRow}
\alias{AverageRows}
\title{General-Purpose Averaging functions}
\usage{
Average(
  ...,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = NULL,
  match.elements = "Yes",
  subset = NULL,
  weights = NULL,
  warn = FALSE
)

AverageEachColumn(
  ...,
  remove.missing = TRUE,
  remove.rows = c("NET", "SUM", "Total"),
  remove.columns = NULL,
  subset = NULL,
  weights = NULL,
  warn = FALSE
)

AverageColumns(
  ...,
  remove.missing = TRUE,
  remove.rows = c("NET", "SUM", "Total"),
  remove.columns = NULL,
  subset = NULL,
  weights = NULL,
  warn = FALSE
)

AverageEachRow(
  ...,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = c("NET", "SUM", "Total"),
  warn = FALSE
)

AverageRows(
  ...,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = c("NET", "SUM", "Total"),
  warn = FALSE
)
}
\arguments{
\item{...}{Objects to be averaged; e.g. vectors, matrices, Variables, VariableSets or Q Tables.}

\item{remove.missing}{Logical element controlling whether missing values should be
removed in calculations? Defaults to \code{TRUE}. If set to \code{FALSE} and if one of
input elements contains missing values, then the resulting computed sum will also be
\code{NA}.}

\item{remove.rows}{The labels of named vectors, or, rows of tables and similar
structures to be removed from the row dimension of the input. Any row elements
with the labels specified here will not be included in the resulting \code{Sum}
calculation.}

\item{remove.columns}{The labels of columns of tables and similar
structures to be removed from the column dimension of the input. Any column elements
with the labels specified here will not be included in the resulting \code{Sum}
calculation.}

\item{match.elements}{Either a single string with three possible options or named character vector with two elements. The possible single character options are: \itemize{
\item "No": Ignores names and requires either inputs which the same dimensions
      or partially agreeing where recycling can be performed. See details for more information.
\item "Yes - hide unmatched" or "Yes": Performs a matching algorithm that checks row names and column names
      of all elements and attempts to match the appropriate elements. The matching
      will check both exact matches or fuzzy matches and permutes the order of the elements
      so that the names match. It also may transpose an input if,
      for example, the column names of one input match the row names of another input.
      Any unmatched elements are removed from the input before calculation.
\item "Yes - show unmatched": Performs the same matching algorithm above but any
      unmatched elements are kept in the input. The other input without the element has
      missing values spliced in.
      }
 A named character vector is possible but it must have two elements named \code{rows}
 or \code{columns} (partial matching names permissible) that specify the matching behavior
 for rows and columns.
 E.g. \code{match.elements = c(rows = "Yes - hide unmatched", columns = "No")} to specify
 that rows are to be matched but unmatched rows are to be removed from the calculation.
 The columns are not to be matched. The full set of alternatives for either \code{match.rows}
 or \code{match.columns} are given below but are described only for the row scenario.
\itemize{
  \item \code{"Yes"} or \code{"Yes - hide unmatched"}: Perform an exact name match between
  the row names of input elements. Any unmatched row names will cause the entire row to be
  removed before calculation.
  \item \code{"Yes - show unmatched"} Performs an exact name match between
  input elements in the same manner as \code{"Yes"} option. However, any row names that are
  not matched in the other outputs are permissible. The input that doesn't have that row
  will have a row of missing values spliced in. The resulting row will either be \code{NA} if
  \code{remove.missing} is set to \code{FALSE} or zero if \code{remove.missing} is set
  to \code{TRUE}.
  \item \code{"Fuzzy"} Same behaviour as \code{"Yes"} except the matching uses fuzzy name
  matching. First an exact name match is performed, any remaining unmatched elements are attempted to
  be matched using near matches using the Levenshtein distance. The algorithm will
  match elements that have a one-to-one matching with a Levenshtein distance of
  at most 1 unit, ignoring case. Following this, some common variants of questionnaire
  reponses are attempted to be matched. E.g. \code{"None of these"} could be matched
  with \code{"none"}. This occurs for variants of \code{"Other"}, \code{"All of these"}
  and variants of \code{"Don't know"}. If further unmatched elements exist, punctuation
   and white space are removed and matches attempted.
  \item \code{"Fuzzy - show unmatched"} Similar to \code{"Fuzzy"} except any unmatched row
  names will have a row of missing values spliced in similar to \code{"Yes - show unmatched"}.
  \item \code{"No"} No matching is to occur with the row names. In this case, all
  input elements need to have the same number of rows.
  }}

\item{subset}{Logical vector of units to use in the calculation. Only applied to variables and
not to Q Tables that contain statistics since the original variable data is unavailable.}

\item{weights}{Numeric vector of weights to use in the calculation. It is required to have the same
number of elements as there are rows in the inputs as the weight vector is applied across the row
dimension (elements in different columns but the same row will have the same weight element applied). The
exception to this is that weights will not be applied to Q Tables containing statistics since
the original variable data is unavailable.}

\item{warn}{Logical element to control whether warnings are shown when non-obvious
operations are performed (e.g., removing rows, removing missing values when they are present).
Possible warnings presented include \itemize{
  \item Whether missing values were identified and removed if \code{remove.missing}
    is set to \code{TRUE}
  \item Whether different statistics are being summed in the case of Q Table.
  \item Whether unmatched rows or columns have been removed from the calculation if the user
  has specified for unmatched elements to be hidden.
  \item Whether any inputs have been recycled to higher dimensional forms.
}}
}
\value{
The \code{Average} function returns the arithmetic mean of all the elements provided in the input,
  possibly after the elements have had entries removed, filtered out or weighted using the provided
  options.

In a similar way, \code{AverageEachColumn} is a generalization of \code{\link{colMeans}} supporting
 row removal and the application of filters and weights before calculation but not supporting row or column matching for multiple inputs.

The \code{AverageEachRow} function returns the arithmetic mean of all the elements in each row
  index provided in the input, possibly after the elements have been pre-processed similar
  to \code{Average}.
}
\description{
\code{Average} is a generalization of the arithmetic \code{\link{mean}} function
 but supporting additional pre-processing and matching of data before calculation
 by utilizing the \code{\link{Sum}} function to compute the numerator.

Also, \code{AverageEachRow} is a generalization of \code{\link{rowMeans}} supporting
 column removal before calculation but not supporting filters, weights and row or column matching
 for multiple inputs.
}
\details{
For \code{Average}, if a single input element is provided, then the output is computed in the same
  way as \code{\link{mean}}, i.e. all elements added together and divided by the number of inputs
  to give a single scalar value.
  If multiple input elements are provided, then the numerator is computed in the same way as \code{\link{Sum}}. That is,
  then element-wise addition is performed using the + function in \code{\link{Arithmetic}}.
  In the case of multiple inputs, the dimensions need to match before elementwise
  addition can occur. i.e. if the first element is a 3 x 2 matrix, then the second element needs to be
  a matrix of the same dimension. Partial dimension matching is also supported, so if an n x p matrix is
  used as the first input, then the second input could be an n x 1 column vector that is recycled to an
  n x p matrix before calculation.

  If weights are provided, they are applied across the row dimension to the input elements. If there is a single input
  with multiple elements, then the weights in the denominator are computed accounting for the missingness of the
  elements. That is, the weight element will be omitted from the calculation if the input element is missing.
  Furthermore, if multiple inputs are provided, then any weights provided will be ignored since all elements in the
  element-wise mean computation will have the same weight and the weights are redundant.

For \code{AverageEachRow} the average is computed within the row dimension of the input.
 E.g. a n x p matrix supplied to \code{Average} will produce a vector of of length \code{n}.
 If names are provided in the row dimension of the input then the output will have the same
 row names.
}
\examples{
# Examples using average
Average(1:6)
mean(1:6)
input.matrix <- matrix(runif(6), nrow = 3, dimnames = list(letters[1:3], c("Q1", "Q2")))
mean(input.matrix)
Average(input.matrix)
Average(1:6, 1:6)
((1:6) + (1:6))/2
x <- 1:6
y <- sample(1:6)
y
Average(x, y)
(x + y)/2
is.na(y) <- 3
is.na(x) <- 3:4
Average(x, y)
x <- matrix(1:12, nrow = 4, ncol = 3, dimnames = list(letters[1:4], LETTERS[1:3]))
y <- matrix(1:20, nrow = 5, ncol = 4, dimnames = list(letters[1:5], LETTERS[1:4]))
Average(x, y, remove.rows = "e", remove.columns = "D")
x <- matrix(1:12, nrow = 4, ncol = 3, dimnames = list(letters[1:4], letters[1:3]))
y <- matrix(1:20, nrow = 5, ncol = 4, dimnames = list(LETTERS[1:5], LETTERS[1:4]))
Average(x, y, match.elements = "Yes")
Average(x, y, match.elements = c(rows = "Fuzzy - show unmatched",
                                 columns = "Fuzzy - show unmatched"))
# Examples using SumColumns
input.matrix <- matrix(1:8, nrow = 4)
AverageEachColumn(input.matrix) #= c(10, 26)
named.matrix <- input.matrix
dimnames(named.matrix) <- list(LETTERS[1:4], letters[1:2])
AverageEachColumn(named.matrix)
AverageEachColumn(named.matrix, remove.rows = c("A", "C"))
AverageEachColumn(named.matrix, subset = c(TRUE, FALSE, TRUE, FALSE))
AverageEachColumn(named.matrix, remove.rows = c("B", "D"))
# Examples using AverageEachRow
input.matrix <- matrix(runif(6), nrow = 3, dimnames = list(letters[1:3], c("Q1", "Q2")))
AverageEachRow(input.matrix)
input.matrix.with.total <- cbind(input.matrix, "Total" = rowSums(input.matrix))
AverageEachRow(input.matrix.with.total) # The total column is removed by default
colnames(input.matrix.with.total) <- c("Q1", "Q2", "tot")
# This will include the total in the calculation since the non-standard Total label is used.
AverageEachRow(input.matrix.with.total)
AverageEachRow(input.matrix.with.total, remove.columns = "tot")
}
