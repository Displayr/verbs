% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/max.R, R/mincolumns.R
\name{Max}
\alias{Max}
\alias{Min}
\alias{MinEachColumn}
\alias{MinColumns}
\alias{MaxEachColumn}
\alias{MaxColumns}
\alias{MaxEachRow}
\alias{MaxRows}
\alias{MinEachRow}
\alias{MinRows}
\title{General-Purpose Calculation of Maxima and Minima}
\usage{
Max(
  ...,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = NULL,
  match.elements = "Yes",
  subset = NULL,
  warn = FALSE
)

Min(
  ...,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = NULL,
  match.elements = "Yes",
  subset = NULL,
  warn = FALSE
)

MinEachColumn(
  x,
  remove.missing = TRUE,
  remove.rows = c("NET", "SUM", "Total"),
  remove.columns = NULL,
  subset = NULL,
  warn = FALSE
)

MinColumns(
  x,
  remove.missing = TRUE,
  remove.rows = c("NET", "SUM", "Total"),
  remove.columns = NULL,
  subset = NULL,
  warn = FALSE
)

MaxEachColumn(
  x,
  remove.missing = TRUE,
  remove.rows = c("NET", "SUM", "Total"),
  remove.columns = NULL,
  subset = NULL,
  warn = FALSE
)

MaxColumns(
  x,
  remove.missing = TRUE,
  remove.rows = c("NET", "SUM", "Total"),
  remove.columns = NULL,
  subset = NULL,
  warn = FALSE
)

MaxEachRow(
  x,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = c("NET", "SUM", "Total"),
  warn = FALSE
)

MaxRows(
  x,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = c("NET", "SUM", "Total"),
  warn = FALSE
)

MinEachRow(
  x,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = c("NET", "SUM", "Total"),
  warn = FALSE
)

MinRows(
  x,
  remove.missing = TRUE,
  remove.rows = NULL,
  remove.columns = c("NET", "SUM", "Total"),
  warn = FALSE
)
}
\arguments{
\item{...}{Input objects to compute the minima or maxima;
e.g. vectors, matrices, Variables, Variable Sets or Q Tables}

\item{remove.missing}{Logical element controlling whether missing values should be
removed in calculations? Defaults to \code{TRUE}. If set to \code{FALSE} and if one of
input elements contains missing values, then the resulting computed sum will also be
\code{NA}.}

\item{remove.rows}{The labels of named vectors, or, rows of tables and similar
structures to be removed from the row dimension of the input. Any row elements
with the labels specified here will not be included in the resulting \code{Sum}
calculation.}

\item{remove.columns}{The labels of columns of tables and similar
structures to be removed from the column dimension of the input. Any column elements
with the labels specified here will not be included in the resulting \code{Sum}
calculation.}

\item{match.elements}{Either a single string with three possible options or named character vector with two
elements. The possible single character options are: \itemize{
\item "No": Ignores names and requires either inputs which the same dimensions
      or partially agreeing where recycling can be performed. See details for more information.
\item "Yes - hide unmatched" or "Yes": Performs a matching algorithm that checks row names and column names
      of all elements and attempts to match the appropriate elements. The matching
      will check both exact matches or fuzzy matches and permutes the order of the elements
      so that the names match. It also may transpose an input if,
      for example, the column names of one input match the row names of another input.
      Any unmatched elements are removed from the input before calculation.
\item "Yes - show unmatched": Performs the same matching algorithm above but any
      unmatched elements are kept in the input. The other input without the element has
      missing values spliced in.
      }
 A named character vector is possible but it must have two elements named \code{rows}
 or \code{columns} (partial matching names permissible) that specify the matching behavior
 for rows and columns.
 E.g. \code{match.elements = c(rows = "Yes - hide unmatched", columns = "No")} to specify
 that rows are to be matched but unmatched rows are to be removed from the calculation.
 The columns are not to be matched. The full set of alternatives for either \code{match.rows}
 or \code{match.columns} are given below but are described only for the row scenario.
\itemize{
  \item \code{"Yes"} or \code{"Yes - hide unmatched"}: Perform an exact name match between
  the row names of input elements. Any unmatched row names will cause the entire row to be
  removed before calculation.
  \item \code{"Yes - show unmatched"} Performs an exact name match between
  input elements in the same manner as \code{"Yes"} option. However, any row names that are
  not matched in the other outputs are permissible. The input that doesn't have that row
  will have a row of missing values spliced in. The resulting row will either be \code{NA} if
  \code{remove.missing} is set to \code{FALSE} or zero if \code{remove.missing} is set
  to \code{TRUE}.
  \item \code{"Fuzzy"} Same behaviour as \code{"Yes"} except the matching uses fuzzy name
  matching. First an exact name match is performed, any remaining unmatched elements are attempted to
  be matched using near matches using the Levenshtein distance. The algorithm will
  match elements that have a one-to-one matching with a Levenshtein distance of
  at most 1 unit, ignoring case. Following this, some common variants of questionnaire
  reponses are attempted to be matched. E.g. \code{"None of these"} could be matched
  with \code{"none"}. This occurs for variants of \code{"Other"}, \code{"All of these"}
  and variants of \code{"Don't know"}. If further unmatched elements exist, punctuation
   and white space are removed and matches attempted.
  \item \code{"Fuzzy - show unmatched"} Similar to \code{"Fuzzy"} except any unmatched row
  names will have a row of missing values spliced in similar to \code{"Yes - show unmatched"}.
  \item \code{"No"} No matching is to occur with the row names. In this case, all
  input elements need to have the same number of rows.
  }}

\item{subset}{Logical vector of units to use in the calculation. Only applied to variables and
not to Q Tables that contain statistics since the original variable data is unavailable.}

\item{warn}{Element to control whether warnings are shown when non-obvious
operations are performed. If a logical (\code{TRUE} or \code{FALSE} then all warnings are
thrown or suppressed respectively. If a string is used then warnings are thrown except for
the missing values ignored warning which is suppressed. Other possible warnings presented
include \itemize{
  \item Whether missing values were identified and removed if \code{remove.missing}
    is set to \code{TRUE}
  \item Whether different statistics are being summed in the case of Q Table.
  \item Whether unmatched rows or columns have been removed from the calculation if the user
  has specified for unmatched elements to be hidden.
  \item Whether any inputs have been recycled to higher dimensional forms.
}}

\item{x}{A single input to be used in \code{MinEachRow} or
\code{MinEachColumn}.}
}
\value{
If a single input is provided, a single number is returned,
    the maximum/minimum of all the elements. If multiple
    inputs, the output will have the same dimension as the input
    and contain the parallel (element-wise) maximum/minimums are
    returned.

The \code{MinEachColumn} (\code{MaxEachColumn}) function
    returns the minimum (maximum) of all the elements in each column index
    provided in the input, possibly after elements of \code{x} have
    been filtered/removed via the other arguments.

The names of the output vector are taken from the \code{dimnames}
of \code{x}.
}
\description{
\code{Max} (\code{Min}) is a generalization of
    \code{\link{max}} (\code{\link{min}}) supporting additional
    pre-processing and matching of data before calculation.

In a similar way, \code{MinEachColumn}
    (\code{MaxEachColumn}) is a vectorized generalization of
    \code{\link{min}} (\code{\link{max}}) calculating the minimum
    (maximum) separately for each column, supporting row removal
    and the application of filters before calculation but not
    supporting multiple inputs.  The functions \code{MinColumns}
    and \code{MinRows} are aliases for \code{MinEachColumn} and
    \code{MinEachRow}, and similarly for \code{MaxColumns} and
    \code{MaxRows}.

Also, \code{MinEachRow} (\code{MaxEachRow}) is a
    vectorized generalization of \code{\link{min}}
    (\code{\link{max}}) calculating the minimum separately for each
    row, supporting column removal before calculation but not
    supporting filters, weights nor multiple inputs.
}
\details{
If a single input is provided, then the maximum or minimum
    of all elements in the input is return (replicating
    \code{\link{min}} and \code{\link{max}}).  If multiple inputs
    are provided, then element-wise addition is performed using
    \code{\link{pmin}} or \code{\link{pmax}}. In the case of
    multiple inputs, the dimensions need to match before
    element-wise calculation can occur. For example, if the first
    element is a 3 x 2 matrix, then the second element needs to be
    a matrix of the same dimension.

If the inputs have named elements, then these names can be used to
    match up each of the elements between inputs via the
    \code{match.rows} and \code{match.columns} arguments. If either
    of \code{match.rows} or \code{match.columns} is set to
    \code{"No"} then names are ignored and the length on that
    dimension needs to agree between inputs. Partial dimension
    agreement is also supported. For example if an n x p matrix is
    used as the first input, then the second input could be an n x
    1 column vector that is recycled to an n x p matrix before
    calculation.

The permissible types for \code{x} are a \code{numeric}
    vector, \code{array} with at most 2 dimensions, a
    \code{data.frame}, Q Table, \code{matrix} or other possible
    structure that has well defined rows or columns.

 In the case of a vector of length n, it is interpreted to be an
 input with n rows and a single column. An array is only
 permissible if it has 2 dimensions, the exception being higher
 order arrays are only allowed in the form of a Q Table.

For \code{MaxEachRow} (\code{MinEachRow}) the maximum
    (minimum) is computed within the row dimension of the input.
    E.g. a n x p matrix supplied to \code{MaxEachRow} will produce
    a vector of of length \code{n}.
}
\examples{
# Examples using Sum
x <- c(NA, 1:3)
Max(x)
Max(x, remove.missing = FALSE)

x <- matrix(1:12, nrow = 4, ncol = 3, dimnames = list(letters[1:4], LETTERS[1:3]))
y <- matrix(20:1, nrow = 5, ncol = 4, dimnames = list(letters[1:5], LETTERS[1:4]))
Max(x, y, remove.rows = "e", remove.columns = "D")
x <- matrix(1:12, nrow = 4, ncol = 3, dimnames = list(letters[1:4], letters[1:3]))
y <- matrix(20:1, nrow = 5, ncol = 4, dimnames = list(LETTERS[1:5], LETTERS[1:4]))
Min(x, y, match.elements = "Yes")
Min(x, y, match.elements = c(rows = "Fuzzy - show unmatched",
                             columns = "Fuzzy - show unmatched"))

# Examples using MinEachColumn
input.matrix <- matrix(1:8, nrow = 4)
MinEachColumn(input.matrix) #= c(10, 26)
named.matrix <- input.matrix
dimnames(named.matrix) <- list(LETTERS[1:4], letters[1:2])
MinEachColumn(named.matrix)
MinEachColumn(named.matrix, remove.rows = c("A", "C"))
MinEachColumn(named.matrix, subset = c(TRUE, FALSE, TRUE, FALSE))
MinEachColumn(named.matrix, remove.rows = c("B", "D"))

input.matrix <- matrix(1:8, nrow = 4)
MaxEachColumn(input.matrix) #= c(10, 26)
named.matrix <- input.matrix
dimnames(named.matrix) <- list(LETTERS[1:4], letters[1:2])
MaxEachColumn(named.matrix)
MaxEachColumn(named.matrix, remove.rows = c("A", "C"))
MaxEachColumn(named.matrix, subset = c(TRUE, FALSE, TRUE, FALSE))
MaxEachColumn(named.matrix, remove.rows = c("B", "D"))

input.matrix <- matrix(runif(6), nrow = 3, dimnames = list(letters[1:3], c("Q1", "Q2")))
MinEachRow(input.matrix)
input.matrix.with.total <- cbind(input.matrix, "Total" = rowSums(input.matrix))
MaxEachRow(input.matrix.with.total) # The total column is removed by default
MaxEachRow(input.matrix.with.total, remove.columns = NULL)
}
